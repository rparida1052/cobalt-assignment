// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Slack-specific fields
  slackUserId    String? @unique
  slackUsername  String?
  slackTeamId    String?
  
  // Relationships
  workspaces WorkspaceMember[]
  messages   Message[]
  
  @@map("users")
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  slackTeamId String   @unique
  domain      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Slack workspace info
  slackAccessToken String?
  slackBotToken    String?
  
  // Relationships
  members        WorkspaceMember[]
  channels       Channel[]
  messages       Message[]
  webhookEvents  WebhookEvent[]
  
  @@map("workspaces")
}

model WorkspaceMember {
  id          String @id @default(cuid())
  userId      String
  workspaceId String
  role        String @default("member") // admin, member, etc.
  joinedAt    DateTime @default(now())

  // Relationships
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("workspace_members")
}

model Channel {
  id          String   @id @default(cuid())
  name        String
  slackChanId String   @unique
  workspaceId String
  isPrivate   Boolean  @default(false)
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  workspace     Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages      Message[]
  webhookEvents WebhookEvent[]
  
  @@map("channels")
}

model Message {
  id          String   @id @default(cuid())
  content     String
  slackMsgId  String?  @unique
  channelId   String
  userId      String
  workspaceId String
  messageType String   @default("text") // text, file, reaction, etc.
  metadata    Json?    // Store additional message metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  channel   Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

model OAuthSession {
  id           String   @id @default(cuid())
  state        String   @unique
  userId       String?
  workspaceId  String?
  redirectUri  String
  scopes       String   // Comma-separated list of scopes
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  @@map("oauth_sessions")
}

model WebhookEvent {
  id          String   @id @default(cuid())
  eventType   String   // message, reaction, user_joined, etc.
  slackEventId String? @unique
  workspaceId String
  channelId   String?
  userId      String?
  payload     Json     // Store the full webhook payload
  processed   Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relationships
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  channel   Channel?  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  
  @@map("webhook_events")
}
